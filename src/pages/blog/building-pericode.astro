---
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<title>Building Pericode: Voice-Controlled Development | Jared Guttromson</title>
		<meta name="description" content="How I built Pericode, a voice-controlled interface for Claude Code that lets developers write code while walking using end-to-end encryption and offline AI models" />

		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
	</head>
	<body>
		<nav>
			<div class="nav-container">
				<a href="/" class="logo">
					<img src="/profile.png" alt="JG" class="logo-img" />
				</a>
				<ul class="nav-links">
					<li><a href="/#experience">Experience</a></li>
					<li><a href="/#projects">Projects</a></li>
					<li><a href="/blog">Blog</a></li>
					<li><a href="/#contact">Contact</a></li>
				</ul>
			</div>
		</nav>

		<article class="blog-post">
			<div class="container">
				<header class="post-header">
					<div class="post-meta">
						<time datetime="2025-10-28">October 28, 2025</time>
						<span class="read-time">12 min read</span>
					</div>
					<h1>Building Pericode: Code While You Walk</h1>
					<p class="subtitle">Designing a voice-controlled development environment with end-to-end encryption, offline AI models, and global relay infrastructure. Inspired by Aristotle's peripatetic philosophy.</p>
					<div class="tags">
						<span class="tag">Electron</span>
						<span class="tag">SwiftUI</span>
						<span class="tag">End-to-End Encryption</span>
						<span class="tag">Cloudflare Workers</span>
						<span class="tag">Claude Code</span>
					</div>
				</header>

				<div class="post-content">
					<h2>The Vision</h2>
					<p>What if you could write code while walking? Debug during your morning run? Review pull requests on the treadmill? This question led me to build <strong>Pericode</strong>, a voice-controlled interface for Claude Code that lets developers be productive anywhere.</p>

					<p>The name comes from Aristotle's <em>peripatetic</em> school of philosophy, where he taught while walking. The idea: your best thinking often happens when you're moving, not sitting still.</p>

					<p><strong>Try it:</strong> <a href="https://pericode.app" target="_blank">pericode.app</a></p>

					<h2>The Challenge: Three Hard Problems</h2>
					<p>Building Pericode meant solving three distinct technical challenges:</p>
					<ol>
						<li><strong>Voice Processing:</strong> How do you do speech-to-text and text-to-speech without cloud latency?</li>
						<li><strong>Security:</strong> How do you protect sensitive code over the internet?</li>
						<li><strong>Connectivity:</strong> How do you connect devices across networks without VPN configuration?</li>
					</ol>

					<h2>Architecture Overview</h2>
					<p>Pericode consists of three components working in harmony:</p>

					<h3>1. Desktop App (Electron)</h3>
					<p>The desktop app runs on your development machine and orchestrates Claude Code agents:</p>
					<ul>
						<li><strong>Multi-agent system:</strong> Spawns Claude Code CLI processes as independent agents</li>
						<li><strong>Real-time streaming:</strong> Parses JSON output from Claude Code and streams to mobile</li>
						<li><strong>Screenshot integration:</strong> MCP (Model Context Protocol) server captures screenshots for visual context</li>
						<li><strong>Tool execution:</strong> Handles bash commands, file edits, and approvals</li>
						<li><strong>Firebase integration:</strong> Session discovery and user authentication</li>
					</ul>

					<h3>2. iOS App (SwiftUI)</h3>
					<p>The mobile app provides the voice interface using cutting-edge offline AI:</p>
					<ul>
						<li><strong>Sherpa-ONNX:</strong> Neural network models for speech recognition and synthesis running entirely on-device</li>
						<li><strong>Sub-second latency:</strong> STT completes in under 1 second, no cloud round-trip</li>
						<li><strong>Privacy-first:</strong> Voice data never leaves your phone</li>
						<li><strong>Apple integrations:</strong> Watch app, headphone controls, Live Activities on Dynamic Island</li>
					</ul>

					<h3>3. Relay Server (Cloudflare Workers)</h3>
					<p>A global edge network routes encrypted messages between devices:</p>
					<ul>
						<li><strong>Durable Objects:</strong> Session state maintained at the edge</li>
						<li><strong>~50ms latency:</strong> Messages routed through Cloudflare's global network</li>
						<li><strong>Zero configuration:</strong> No port forwarding or VPN setup needed</li>
						<li><strong>Auto-scaling:</strong> Handles hundreds of concurrent sessions</li>
					</ul>

					<h2>Solving Voice Processing</h2>
					<p>Early on, I had to choose between cloud-based voice services (Google, Azure, AWS) or offline models. Here's why I chose offline:</p>

					<h3>Why Sherpa-ONNX?</h3>
					<p><strong>Sherpa-ONNX</strong> is a neural speech toolkit that runs ONNX models directly on device. The benefits are dramatic:</p>
					<ul>
						<li><strong>Latency:</strong> <1s for STT vs 2-3s for cloud APIs</li>
						<li><strong>Privacy:</strong> Voice never transmitted (critical for coding sessions)</li>
						<li><strong>Cost:</strong> Zero per-request charges (cloud APIs charge $0.006-0.024/min)</li>
						<li><strong>Offline:</strong> Works without internet (only Claude API calls need connectivity)</li>
						<li><strong>Battery:</strong> More efficient than streaming audio to servers</li>
					</ul>

					<p>The trade-off? Model size. The STT model is ~150MB, TTS models ~50MB each. But with modern phone storage, this is negligible compared to the benefits.</p>

					<h2>The Encryption Story</h2>
					<p>Passing code snippets and voice commands through a relay server is a massive security risk. I needed bank-level encryption, but most E2E implementations add significant complexity.</p>

					<h3>X25519 + ChaCha20-Poly1305</h3>
					<p>I implemented a complete end-to-end encryption system:</p>

					<p><strong>Key Exchange (X25519 ECDH):</strong></p>
					<ul>
						<li>Desktop generates X25519 keypair, stores in <code>~/.pericode/keys/</code></li>
						<li>iOS generates keypair, stores in Keychain</li>
						<li>Both upload public keys to Firebase Firestore</li>
						<li>Each derives the same shared secret using ECDH (never transmitted!)</li>
					</ul>

					<p><strong>Message Encryption (ChaCha20-Poly1305 AEAD):</strong></p>
					<ul>
						<li>256-bit symmetric encryption</li>
						<li>96-bit random nonces per message</li>
						<li>128-bit authentication tags</li>
						<li>~0.5ms overhead per message</li>
					</ul>

					<p>The result? The relay server sees only encrypted ciphertext. Your code, voice commands, and Claude responses are completely private.</p>

					<h3>Security Properties</h3>
					<ul>
						<li><strong>Forward secrecy:</strong> Keys rotate per session</li>
						<li><strong>Authentication:</strong> Firebase prevents session hijacking</li>
						<li><strong>Zero-knowledge relay:</strong> Server cannot decrypt messages</li>
						<li><strong>No key transmission:</strong> ECDH magic derives shared secret</li>
					</ul>

					<h2>The Relay Server Decision</h2>
					<p>Initially, I tried building a direct connection using WireGuard VPN. After weeks of development, I scrapped it. Here's why:</p>

					<h3>Problems with WireGuard:</h3>
					<ul>
						<li>Requires sudo on desktop (security red flag)</li>
						<li>Complex pairing (QR codes, config files)</li>
						<li>Doesn't work across different networks without port forwarding</li>
						<li>No automatic discovery</li>
					</ul>

					<h3>Why Cloudflare Workers + Durable Objects?</h3>
					<ul>
						<li><strong>Global edge network:</strong> ~50ms latency from anywhere</li>
						<li><strong>WebSocket routing:</strong> Messages relay between devices automatically</li>
						<li><strong>Session isolation:</strong> Each session in its own Durable Object</li>
						<li><strong>Auto-expiry:</strong> Sessions timeout after inactivity</li>
						<li><strong>Free tier:</strong> Covers hundreds of users</li>
					</ul>

					<p>The ~50ms added latency is imperceptible in practice, and the user experience is dramatically better: just tap a desktop name in the app and connect instantly.</p>

					<h2>Screenshot Streaming via MCP</h2>
					<p>One of Claude Code's strengths is visual reasoning. To leverage this, I built screenshot integration using Model Context Protocol (MCP):</p>

					<ul>
						<li><strong>MCP Server:</strong> Desktop runs an MCP server that Claude Code can call</li>
						<li><strong>Multiple capture modes:</strong> Active window, full screen, specific app</li>
						<li><strong>Compression:</strong> Sharp library compresses to <4MB</li>
						<li><strong>Base64 streaming:</strong> Images sent via relay in chunks</li>
						<li><strong>Inline display:</strong> iOS shows thumbnails, tap for full-screen</li>
					</ul>

					<p>This means when you say "the UI looks broken," Claude can actually see your screen and provide accurate debugging help.</p>

					<h2>Multi-Agent Orchestration</h2>
					<p>Unlike traditional chatbots, Pericode runs multiple Claude Code agents simultaneously:</p>

					<ul>
						<li><strong>Agent lifecycle:</strong> Each agent is a spawned child process</li>
						<li><strong>Independent execution:</strong> Agents don't block each other</li>
						<li><strong>Project isolation:</strong> Agents grouped by directory</li>
						<li><strong>Conversation history:</strong> Each agent maintains its own context</li>
						<li><strong>Streaming output:</strong> Real-time updates via JSON parsing</li>
					</ul>

					<p>You can have one agent refactoring your authentication module while another runs tests, and a third reviews your PR. All controlled by voice.</p>

					<h2>Tool Approval Workflow</h2>
					<p>Giving an AI full access to bash commands and file edits is dangerous. I built an approval system:</p>

					<ul>
						<li><strong>SwiftUI sheet:</strong> Beautiful approval UI on iOS</li>
						<li><strong>Tool details:</strong> Shows command, description, and parameters</li>
						<li><strong>Push notifications:</strong> Fallback if app is backgrounded</li>
						<li><strong>Auto-approve option:</strong> For trusted use cases</li>
					</ul>

					<p>Example: Claude wants to run <code>npm install</code>. You get a notification, review the command, approve or deny. If denied, Claude continues without that tool.</p>

					<h2>Performance Metrics</h2>
					<p>Here's how fast the system actually is:</p>

					<table>
						<thead>
							<tr>
								<th>Operation</th>
								<th>Time</th>
								<th>Notes</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>STT (Speech-to-Text)</td>
								<td>&lt;1 second</td>
								<td>Sherpa-ONNX on iPhone 14</td>
							</tr>
							<tr>
								<td>Encryption</td>
								<td>~0.5ms</td>
								<td>Per message</td>
							</tr>
							<tr>
								<td>Relay routing</td>
								<td>50-150ms</td>
								<td>Depends on geography</td>
							</tr>
							<tr>
								<td>Screenshot capture</td>
								<td>&lt;200ms</td>
								<td>macOS screencapture</td>
							</tr>
							<tr>
								<td>TTS start</td>
								<td>&lt;500ms</td>
								<td>Until audio playback begins</td>
							</tr>
							<tr>
								<td>End-to-end</td>
								<td>2-5 seconds</td>
								<td>Voice → Claude → Audio</td>
							</tr>
						</tbody>
					</table>

					<h2>Battery Life</h2>
					<p>Mobile battery impact was a major concern:</p>
					<ul>
						<li><strong>Active use:</strong> &lt;5% per hour</li>
						<li><strong>Background:</strong> &lt;1% per hour</li>
						<li><strong>Screen on:</strong> Minimal impact (no video streaming)</li>
					</ul>

					<p>The offline AI models are surprisingly efficient. Most battery drain comes from the screen, not processing.</p>

					<h2>Challenges & Lessons</h2>

					<h3>1. WireGuard Complexity</h3>
					<p><strong>Lesson:</strong> Sometimes the "right" technical solution isn't the right user experience. Scrapping weeks of WireGuard work to pivot to relay servers was painful but necessary.</p>

					<h3>2. JSON Parsing Hell</h3>
					<p>Claude Code outputs JSON for tool uses, but the format isn't strictly defined. I spent days building a robust parser that handles edge cases (nested JSON, streaming chunks, malformed output).</p>

					<h3>3. Encryption Key Mismatches</h3>
					<p>Early in development, desktop and mobile would derive different shared secrets due to subtle endianness bugs. Took a week to debug. Now rock-solid.</p>

					<h3>4. Screenshot Size</h3>
					<p>Initial implementation sent 10MB+ screenshots. Uncompressed PNGs are huge! Sharp library now compresses to <4MB with negligible quality loss.</p>

					<h2>What's Next</h2>
					<p>Pericode is fully functional and in private beta. Upcoming features:</p>

					<ul>
						<li><strong>Voice activation:</strong> "Hey Claude" wake word using Sherpa-ONNX</li>
						<li><strong>WebRTC:</strong> Direct peer-to-peer connection with relay fallback</li>
						<li><strong>Post-quantum encryption:</strong> Upgrade to Kyber once stable</li>
						<li><strong>Collaborative mode:</strong> Multiple developers, one project</li>
						<li><strong>Screen sharing:</strong> See desktop screen on mobile</li>
					</ul>

					<h2>Technology Stack Summary</h2>

					<table>
						<thead>
							<tr>
								<th>Component</th>
								<th>Technology</th>
								<th>Why</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>Desktop Backend</td>
								<td>Node.js + TypeScript</td>
								<td>Fast development, Claude Code CLI integration</td>
							</tr>
							<tr>
								<td>Desktop UI</td>
								<td>React + Vite</td>
								<td>Familiar tooling, fast builds</td>
							</tr>
							<tr>
								<td>Desktop Framework</td>
								<td>Electron</td>
								<td>Cross-platform, mature ecosystem</td>
							</tr>
							<tr>
								<td>iOS Framework</td>
								<td>SwiftUI</td>
								<td>Native performance, Apple integrations</td>
							</tr>
							<tr>
								<td>STT/TTS</td>
								<td>Sherpa-ONNX</td>
								<td>Offline, low latency, privacy</td>
							</tr>
							<tr>
								<td>Encryption</td>
								<td>X25519 + ChaCha20-Poly1305</td>
								<td>Modern, fast, proven security</td>
							</tr>
							<tr>
								<td>Relay</td>
								<td>Cloudflare Workers</td>
								<td>Global edge, zero config, free tier</td>
							</tr>
							<tr>
								<td>Database</td>
								<td>Firebase Firestore</td>
								<td>Real-time, authentication included</td>
							</tr>
							<tr>
								<td>Claude Integration</td>
								<td>Claude Code CLI</td>
								<td>Computer use tools, MCP support</td>
							</tr>
						</tbody>
					</table>

					<h2>Open Source?</h2>
					<p>Currently in private beta. I'm exploring options for open-sourcing components (encryption library, relay server template, MCP screenshot server) while keeping the core product commercial.</p>

					<p>If you're interested in trying Pericode or have feedback on what should be open-sourced, reach out!</p>

					<h2>Conclusion</h2>
					<p>Building Pericode taught me that the best developer experiences come from solving multiple hard problems well:</p>

					<ul>
						<li><strong>Latency matters:</strong> Offline AI models beat cloud services for user experience</li>
						<li><strong>Security is non-negotiable:</strong> E2E encryption is table stakes for code tools</li>
						<li><strong>UX > technical elegance:</strong> Relay servers beat VPN in practice</li>
						<li><strong>Integration depth wins:</strong> Watch, headphones, Live Activities all add up</li>
					</ul>

					<p>Most importantly: sometimes your best code happens when you're not at your desk. Pericode is my attempt to make that a reality.</p>

					<p><strong>Try it:</strong> <a href="https://pericode.app" target="_blank">pericode.app</a></p>

					<p><strong>GitHub:</strong> Coming soon (components will be open-sourced)</p>
				</div>

				<footer class="post-footer">
					<div class="author-info">
						<img src="/profile.png" alt="Jared Guttromson" class="author-avatar" />
						<div class="author-details">
							<strong>Jared Guttromson</strong>
							<p>Building tools for developers. Previously at Yum! Brands, Stanford.</p>
						</div>
					</div>
					<div class="share-links">
						<a href="https://twitter.com/intent/tweet?text=Building%20Pericode%3A%20Voice-Controlled%20Development&url=https://jaredguttromson.com/blog/building-pericode" target="_blank">Share on Twitter</a>
						<a href="https://www.linkedin.com/sharing/share-offsite/?url=https://jaredguttromson.com/blog/building-pericode" target="_blank">Share on LinkedIn</a>
					</div>
				</footer>
			</div>
		</article>

		<style>
			:root {
				--bg-primary: #0a0a0a;
				--bg-secondary: #111;
				--text-primary: #e4e4e4;
				--text-secondary: #a0a0a0;
				--accent: #7c3aed;
				--accent-hover: #8b5cf6;
				--border: #222;
			}

			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
				background: var(--bg-primary);
				color: var(--text-primary);
				line-height: 1.7;
			}

			/* Navigation */
			nav {
				background: var(--bg-secondary);
				border-bottom: 1px solid var(--border);
				position: sticky;
				top: 0;
				z-index: 100;
				backdrop-filter: blur(10px);
			}

			.nav-container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 1.5rem 2rem;
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.logo {
				text-decoration: none;
			}

			.logo-img {
				width: 40px;
				height: 40px;
				border-radius: 50%;
			}

			.nav-links {
				display: flex;
				gap: 2rem;
				list-style: none;
			}

			.nav-links a {
				color: var(--text-secondary);
				text-decoration: none;
				transition: color 0.2s;
			}

			.nav-links a:hover {
				color: var(--accent);
			}

			/* Blog Post */
			.blog-post {
				max-width: 800px;
				margin: 0 auto;
				padding: 4rem 2rem;
			}

			.post-meta {
				display: flex;
				gap: 1rem;
				color: var(--text-secondary);
				font-size: 0.9rem;
				margin-bottom: 1rem;
			}

			.post-header h1 {
				font-size: 3rem;
				font-weight: 800;
				line-height: 1.2;
				margin-bottom: 1rem;
			}

			.subtitle {
				font-size: 1.25rem;
				color: var(--text-secondary);
				margin-bottom: 1.5rem;
			}

			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-bottom: 3rem;
			}

			.tag {
				background: var(--bg-secondary);
				color: var(--accent);
				padding: 0.5rem 1rem;
				border-radius: 20px;
				font-size: 0.85rem;
				border: 1px solid var(--border);
			}

			.post-content {
				font-size: 1.1rem;
			}

			.post-content h2 {
				font-size: 2rem;
				font-weight: 700;
				margin: 3rem 0 1.5rem;
				color: var(--text-primary);
			}

			.post-content h3 {
				font-size: 1.5rem;
				font-weight: 600;
				margin: 2rem 0 1rem;
				color: var(--text-primary);
			}

			.post-content p {
				margin-bottom: 1.5rem;
				color: var(--text-secondary);
			}

			.post-content ul,
			.post-content ol {
				margin-bottom: 1.5rem;
				padding-left: 1.5rem;
				color: var(--text-secondary);
			}

			.post-content li {
				margin-bottom: 0.5rem;
			}

			.post-content code {
				background: var(--bg-secondary);
				color: var(--accent);
				padding: 0.2rem 0.4rem;
				border-radius: 4px;
				font-size: 0.9em;
				font-family: 'SF Mono', 'Monaco', monospace;
			}

			.post-content a {
				color: var(--accent);
				text-decoration: none;
			}

			.post-content a:hover {
				color: var(--accent-hover);
				text-decoration: underline;
			}

			.post-content table {
				width: 100%;
				border-collapse: collapse;
				margin: 2rem 0;
				background: var(--bg-secondary);
				border-radius: 8px;
				overflow: hidden;
			}

			.post-content th,
			.post-content td {
				padding: 1rem;
				text-align: left;
				border-bottom: 1px solid var(--border);
			}

			.post-content th {
				background: var(--bg-primary);
				font-weight: 600;
				color: var(--text-primary);
			}

			.post-content td {
				color: var(--text-secondary);
			}

			.post-content strong {
				color: var(--text-primary);
				font-weight: 600;
			}

			.post-footer {
				margin-top: 4rem;
				padding-top: 2rem;
				border-top: 1px solid var(--border);
			}

			.author-info {
				display: flex;
				gap: 1rem;
				align-items: center;
				margin-bottom: 2rem;
			}

			.author-avatar {
				width: 60px;
				height: 60px;
				border-radius: 50%;
			}

			.author-details strong {
				display: block;
				margin-bottom: 0.25rem;
			}

			.author-details p {
				color: var(--text-secondary);
				font-size: 0.9rem;
				margin: 0;
			}

			.share-links {
				display: flex;
				gap: 1rem;
			}

			.share-links a {
				padding: 0.75rem 1.5rem;
				background: var(--bg-secondary);
				border: 1px solid var(--border);
				border-radius: 8px;
				text-decoration: none;
				color: var(--text-secondary);
				transition: all 0.2s;
			}

			.share-links a:hover {
				background: var(--accent);
				color: white;
				border-color: var(--accent);
			}

			@media (max-width: 768px) {
				.post-header h1 {
					font-size: 2rem;
				}

				.subtitle {
					font-size: 1.1rem;
				}

				.nav-links {
					gap: 1rem;
					font-size: 0.9rem;
				}

				.post-content {
					font-size: 1rem;
				}

				.blog-post {
					padding: 2rem 1.5rem;
				}
			}
		</style>
	</body>
</html>
